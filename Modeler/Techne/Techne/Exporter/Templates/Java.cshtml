// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
@using Techne.Plugins.Interfaces;
@using Techne.Model;
@functions
{
	string ToString(object o)
	{
		return o.ToString().Replace(',','.');
	}
	double ToRad(double p)
	{
		return p * Math.PI / 180;
	}
	IEnumerable<string> GetFQN(ITechneVisual visual, bool first = false)
	{
		if (visual.Parent != null && !first)
		{
			foreach (var name in GetFQN(visual.Parent, true))
				yield return name;
		}
		yield return visual.Name;
	}
}
@helper CreateSetTexutreOffset(ITechneVisual visual)
{
	if (visual is ITechneVisualCollection)
	{
		foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
		{
			@CreateSetTexutreOffset(child);
		}
	}
	else
	{
		var name = string.Join(".", GetFQN(visual));

		@:setTextureOffset("@name", @visual.TextureOffset.X, @visual.TextureOffset.Y);
	}
}
@helper CreateConstructor(ITechneVisual visual)
{
	if (visual is ITechneVisualCollection)
	{
		@:@visual.Name = new ModelRenderer(this, "@visual.Name");
		if(visual.Position.Length > 0)
		{
			@:@(visual.Name).setRotationPoint(@(ToString((float)visual.Position.X))F, @(ToString((float)visual.Position.Y))F, @(ToString((float)visual.Position.Z))F);
		}
		if(visual.RotationX > 0)
		{
			@:@(visual.Name).rotateAngleX = @(ToString(Math.Round(ToRad(visual.RotationX), 5)))F;
		}
		if(visual.RotationY > 0)
		{
			@:@(visual.Name).rotateAngleY = @(ToString(Math.Round(ToRad(visual.RotationY), 5)))F;
		}
		if(visual.RotationZ > 0)
		{
			@:@(visual.Name).rotateAngleZ = @(ToString(Math.Round(ToRad(visual.RotationZ), 5)))F;
		}

		foreach (ITechneVisual child in ((ITechneVisualCollection)visual).Children)
		{
			@CreateConstructor(child)
		}

		if (visual.Parent != null)
		{
			@:@(visual.Parent.Name).addChildModelRenderer(@visual.Name);
		}
	}
	else
	{
		//not quite sure if that's actually working
		if(visual.IsMirrored == true)
		{
			@:@(visual.Name).mirror = true;
		}
		
		if (visual.Parent == null)
		{
			@:@visual.Name = new ModelRenderer(this, "@visual.Name");
			@:@(visual.Name).addBox(@visual.Name, @((float)visual.Offset.X)F, @((float)visual.Offset.Y)F, @((float)visual.Offset.Z)F, @(visual.Width), @(visual.Length), @(visual.Height));
		} 
		else
		{
			@:@(visual.Parent.Name).addBox(@visual.Name, @((float)visual.Offset.X)F, @((float)visual.Offset.Y)F, @((float)visual.Offset.Z)F, @(visual.Width), @(visual.Length), @(visual.Height));
		}
		if(visual.IsMirrored == true)
		{
			@:@(visual.Name).mirror = false;
		}
	}
}
@helper CreateRender(ITechneVisual visual)
{
	@:@(visual.Name).render(f5);
}
@helper CreateFields(ITechneVisual visual)
{
	@:ModelRenderer @(visual.Name);
}

package net.minecraft.src;

public class Model@(Model.Name) extends @Model.BaseClass
{
	public Model@(Model.Name)()
	{
		textureWidth = @Model.TextureSize.X;
		textureHeight = @Model.TextureSize.Y;
		@foreach (ITechneVisual visual in @Model.Geometry)
		{
			@CreateSetTexutreOffset(visual);
		}

		@foreach (ITechneVisual visual in @Model.Geometry)
		{
			@CreateConstructor(visual)
		}
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5);
		@foreach (ITechneVisual visual in @Model.Geometry)
		{
			@CreateRender(visual)
		}
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5);
	}

	//fields
	@foreach (ITechneVisual visual in @Model.Geometry)
	{
		@CreateFields(visual)
	}
}