<!--
Copyright (c) Alexander S. Brunner
This source is subject to the Microsoft Public License.
See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
All other rights reserved.
-->
<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:CinchV2="clr-namespace:Cinch;assembly=Cinch.WPF"
        xmlns:meffed="http:\\www.codeplex.com\MEFedMVVM"
        xmlns:local="clr-namespace:Techne;assembly="
        xmlns:localControls="clr-namespace:Techne.Controls;assembly="
        xmlns:localModels="clr-namespace:Techne.Model;assembly="
        xmlns:plugins="clr-namespace:Techne.Plugins.Interfaces;assembly=Techne.Plugins.Interfaces"
        xmlns:AvalonDock="clr-namespace:AvalonDock;assembly=AvalonDock"
        xmlns:helix="clr-namespace:HelixToolkit;assembly=HelixToolkit"
        xmlns:toolkit="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit.Extended"
        xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
        xmlns:converter="clr-namespace:Techne.ValueConverters"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="Techne.MainWindow"
        Title="Techne" Height="768" Width="1024"
        Icon="/Techne;component/Resources/Logo.ico"
        meffed:ViewModelLocator.ViewModel="MainWindowViewModel"
        x:Name="mainWindow"
        >
    <Window.Resources>
        <converter:ScaleConverter x:Key="scaleConverter" />
        <converter:VisualToTechneConverter x:Key="visualToTechneConverter" />
		<converter:BooleanOrConverter x:Key="booleanOrConverter" />
		<converter:ITechneVisualDataSelector x:Key="iTechneVisualTemplateSelector" />
    </Window.Resources>
    <!--<Window.CommandBindings>
        <CommandBinding Command="{Binding KeyboardCommand}"/>
    </Window.CommandBindings>-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="KeyUp">
            <CinchV2:EventToCommandTrigger Command="{Binding KeyUpCommand}">
            	<CinchV2:EventToCommandTrigger.CommandParameter>
            		        	<MultiBinding Converter="{StaticResource booleanOrConverter}">
                        <Binding Path="IsFocused" ElementName="elementName" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="length" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="height" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="width" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="positionX" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="positionY" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="positionZ" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="offsetX" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="offsetY" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="offsetZ" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="textureOffsetX" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="textureOffsetY" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="rotateX" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="rotateY" />
                        <Binding Path="IsKeyboardFocusWithin" ElementName="rotateZ" />
								</MultiBinding>
				</CinchV2:EventToCommandTrigger.CommandParameter>
           	</CinchV2:EventToCommandTrigger>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Canvas x:Name="MainCanvas">
        
        <Grid Width="{Binding ElementName=MainCanvas, Path=ActualWidth}" Height="{Binding ElementName=MainCanvas, Path=ActualHeight}">
            <Grid.RowDefinitions>
                <RowDefinition Height="24" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Menu HorizontalAlignment="Stretch" x:Name="menu1" Grid.Row="0">
                <MenuItem Header="File">
                    <MenuItem Header="New Project" Command="{Binding NewModelCommand}" />
                    <MenuItem Header="Edit Project" Command="{Binding EditProjectCommand}" />
                    <Separator />
                    <MenuItem Header="Open" Command="{Binding OpenCommand, PresentationTraceSources.TraceLevel=High}" />
                    <MenuItem Header="Save" Command="{Binding SaveCommand}" />
                    <MenuItem Header="Save As" Command="{Binding SaveAsCommand}" />
                    <MenuItem Header="Import from" ItemsSource="{Binding ImportPluginMenuItems}">
                        <MenuItem.ItemContainerStyle>
                            <Style>
                                <Setter Property="HeaderedItemsControl.Header" Value="{Binding Header}"/>
                                <Setter Property="MenuItem.Command" Value="{Binding Command}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="Export as" ItemsSource="{Binding ExportPluginMenuItems}">
                        <MenuItem.ItemContainerStyle>
                            <Style>
                                <Setter Property="HeaderedItemsControl.Header" Value="{Binding Header}"/>
                                <Setter Property="MenuItem.Command" Value="{Binding Command}"/>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="Exit" Command="{Binding QuitCommand}" />
                </MenuItem>
                
                <MenuItem Header="Edit">
                    <MenuItem Header="Undo" Command="{Binding UndoCommand}" />
                    <MenuItem Header="Redo" Command="{Binding RedoCommand}" />
                    <Separator />
                    <MenuItem Header="Copy" Command="{Binding CopyCommand}" />
                    <MenuItem Header="Paste" Command="{Binding PasteCommand}" />
                    <MenuItem Header="Paste with Coordinates" Command="{Binding PasteCoordinatesCommand}" />
                    <Separator />
                    <MenuItem Header="Delete Selected" Command="{Binding DeleteCommand}" />
                    <MenuItem Header="Clear Model" Command="{Binding ClearCommand}" />
                    <Separator />
                    <MenuItem Header="Select All" Command="{Binding SelectAllCommand}" />
                    <Separator />
                    <MenuItem Header="Load Texture" Command="{Binding LoadTextureCommand}" />
                    <Separator />
                    <MenuItem Header="Edit Project" Command="{Binding EditProjectCommand}" />
                </MenuItem>
                
                <MenuItem Header="Tools">
                    <MenuItem Header="Showcase" Command="{Binding ToggleShowcaseCommand}" />
                    <MenuItem Header="Open Backupfolder" Command="{Binding OpenBackupFolderCommand}" />
                    <Separator />
                    <MenuItem Header="Settings" Command="{Binding OpenSettingsCommand}" />
                </MenuItem>
				<MenuItem Header="Send Feedback" Command="{Binding SendFeedbackCommand}" />
                <MenuItem Header="Help">
                    <MenuItem Header="Open Help" Command="{Binding OpenHelpCommand}" />
                    <MenuItem Header="Open irc-Channel" Command="{Binding OpenIrcCommand}" />
                    <Separator />
                    <MenuItem Header="Open Changelog" Command="{Binding OpenChangeLogViewCommand}" />
                    <MenuItem Header="About" Command="{Binding OpenAboutViewCommand}" />
                </MenuItem>
                <MenuItem Command="{Binding OpenDonateCommand}">
                    <MenuItem.Header>
                        <Image Height="16" Source="Resources/donate_button.gif" />
                    </MenuItem.Header>
                </MenuItem>
            </Menu>

            <AvalonDock:DockingManager Grid.Row="1" VerticalAlignment="Stretch">
                <AvalonDock:ResizingPanel Background="{StaticResource ControlBackgroundBrush}">
                    <AvalonDock:DockablePane AvalonDock:ResizingPanel.ResizeWidth="185" UseLayoutRounding="False" Background="#666666">
                		<AvalonDock:DockableContent Title="Controls">
                            <StackPanel>
                                <localControls:SelectedVisualControl DataContext="{Binding SelectedVisual}" />
                                <Label Foreground="White" Content="GlScale" Grid.Row="14" Grid.Column="0" HorizontalAlignment="Left" Height="auto" Style="{DynamicResource SimpleLabel}" Width="153" Grid.ColumnSpan="3"/>
                                <toolkit:NumericUpDown ResetValueOnMiddleClick="true" ResetDefaultValue="1" Foreground="#FFFFFF" x:Name="glScaleX" Grid.Row="15" Grid.Column="0" Maximum="50" Minimum="0" FormatString="F1" Increment="0.1" Value="{Binding GlScaleX, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <toolkit:NumericUpDown ResetValueOnMiddleClick="true" ResetDefaultValue="1" Foreground="#FFFFFF" x:Name="glScaleY" Grid.Row="15" Grid.Column="1" Maximum="50" Minimum="0" FormatString="F1" Increment="0.1" Value="{Binding GlScaleY, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <toolkit:NumericUpDown ResetValueOnMiddleClick="true" ResetDefaultValue="1" Foreground="#FFFFFF" x:Name="glScaleZ" Grid.Row="15" Grid.Column="2" Maximum="50" Minimum="0" FormatString="F1" Increment="0.1" Value="{Binding GlScaleZ, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <ToolBarPanel Height="auto" HorizontalAlignment="Stretch" x:Name="toolBarPanel1" VerticalAlignment="Stretch" Width="auto">
                                    <ToolBar Height="auto" x:Name="toolBar1" Width="auto" ItemsSource="{Binding ShapeToolBarItems}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <ToolBar.ItemTemplate>
                                            <DataTemplate>
                                                <Button ToolTip="{Binding Text}" Command="{Binding Command}" Click="Focus_Helix">
                                                    <!-- maybe a little smaller - or larger in general? -->
                                                    <Image Width="26" Height="22" Source="{Binding Icon}" />
                                                </Button>
                                            </DataTemplate>
                                        </ToolBar.ItemTemplate>
                                    </ToolBar>
                                    <ToolBar Height="auto" x:Name="toolToolBar" Width="auto" ItemsSource="{Binding ToolToolBarItems}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <ToolBar.ItemTemplate>
                                            <DataTemplate>
                                                <Button ToolTip="{Binding Text}" Command="{Binding Command}" Click="Focus_Helix">
                                                    <!-- maybe a little smaller - or larger in general? -->
                                                    <Image Width="20" Height="16" Source="{Binding Icon}" />
                                                </Button>
                                            </DataTemplate>
                                        </ToolBar.ItemTemplate>
                                    </ToolBar>
                                    <ToolBar>
                                        <StackPanel>
                                            <!--<Button Command="{Binding AnimateCommand}">LoadTexture</Button>-->
                                            <Button Command="{Binding LoadTextureCommand}" Content="Load Texture" Click="Focus_Helix" />
                                            <Button Command="{Binding DeleteCommand}" Content="Delete Box" />
                                            <Button Command="{Binding CopyCommand}" Content="Copy" />
                                            <Button Command="{Binding PasteCommand}" Content="Paste" />
                                        </StackPanel>
                                    </ToolBar>
                                </ToolBarPanel>
                            </StackPanel>
                        </AvalonDock:DockableContent>

                	</AvalonDock:DockablePane>
						
                	<AvalonDock:DockablePane ShowHeader="False">
                		<AvalonDock:DockableContent Title="Modeler">
                			<ContentPresenter Name="HelixView"  Content="{Binding HelixView}"/>
                		</AvalonDock:DockableContent>
                	</AvalonDock:DockablePane>
                	<AvalonDock:ResizingPanel AvalonDock:ResizingPanel.ResizeWidth="185" Orientation="Vertical">
                		<AvalonDock:DockablePane>
                            <AvalonDock:DockableContent Title="Texture" VerticalAlignment="Bottom" Background="{StaticResource ControlBackgroundBrush}">
                				<Grid><!--
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height=".5*" />
                                        <RowDefinition Height=".5*" />
                                    </Grid.RowDefinitions>
									-->
                                    
                                    <Rectangle Fill="White" Width="{Binding ActualWidth, ElementName=texture}" Height="{Binding ActualHeight, ElementName=texture}" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        
                                    </Rectangle>
                                    <Image x:Name="texture" SnapsToDevicePixels="True" Source="{Binding Texture}" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                    <ContentPresenter Content="{Binding TextureViewerOverlay}" >
                						<ContentPresenter.LayoutTransform>
                							<ScaleTransform>
                								<ScaleTransform.ScaleX>
                									<MultiBinding Converter="{StaticResource scaleConverter}" ConverterParameter="0">
                										<Binding ElementName="texture" Path="ActualWidth" />
                										<Binding ElementName="texture" Path="ActualHeight" />
                										<Binding Path="TextureViewModel.TextureSize.X" />
                										<Binding Path="TextureViewModel.TextureSize.Y" />
                									</MultiBinding>
                								</ScaleTransform.ScaleX>
 
                								<ScaleTransform.ScaleY>
                                                    <MultiBinding Converter="{StaticResource scaleConverter}" ConverterParameter="1">
                										<Binding ElementName="texture" Path="ActualWidth" />
                										<Binding ElementName="texture" Path="ActualHeight" />
                										<Binding Path="TextureViewModel.TextureSize.X" />
                										<Binding Path="TextureViewModel.TextureSize.Y" />
                									</MultiBinding>
                								</ScaleTransform.ScaleY>
                							</ScaleTransform>
                						</ContentPresenter.LayoutTransform>
                					</ContentPresenter>
                				</Grid>
                			</AvalonDock:DockableContent>
						
                		</AvalonDock:DockablePane>
                		<AvalonDock:DockablePane>
                			<AvalonDock:DockableContent Title="Model Tree" Height="22" Width="73.357">
                                <localControls:ModelTreeViewControl DataContext="{Binding ModelTreeViewModel}"></localControls:ModelTreeViewControl>
                			</AvalonDock:DockableContent>
                		</AvalonDock:DockablePane>
                	</AvalonDock:ResizingPanel>

                </AvalonDock:ResizingPanel>
            </AvalonDock:DockingManager>
        </Grid>
		
		<TextBlock x:Name="textBlock" Canvas.Bottom="0" Canvas.Left="0" Text="{Binding Message, NotifyOnTargetUpdated=True}">
			<TextBlock.Style>
				<Style TargetType="{x:Type TextBlock}">
					<Setter Property="Background" Value="#222222" />
					<Setter Property="Foreground" Value="#FFFFFF" />
					<Setter Property="TextDecorations" Value="Underline" />
		            <Style.Triggers>
		            	<EventTrigger RoutedEvent="Binding.TargetUpdated">
                    		<BeginStoryboard>
	                            <Storyboard>
	                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="00:00:00" BeginTime="00:00:00" From="0.0" To="1.0" />
	                                <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="00:00:03" BeginTime="00:00:05" From="1.0" To="0.0" />
	                            </Storyboard>
                        	</BeginStoryboard>    
                		</EventTrigger>    
		            </Style.Triggers>
		        </Style>
			</TextBlock.Style>
		</TextBlock>
    </Canvas>
</Window>

